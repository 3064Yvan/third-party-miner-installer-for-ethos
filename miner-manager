#!/bin/bash

# to use run `source <(curl -s https://raw.githubusercontent.com/cynixx3/third-party-miner-installer-for-ethos/master/miner-manager) miner action` Where the miner is the branch in the repo and the actions are install, update, or revert
# IE `source <(curl -s https://raw.githubusercontent.com/cynixx3/third-party-miner-installer-for-ethos/master/miner-manager) phoenixminer install`
# Any setting changes to this should be made to the miner.settings file in the miners branch of this repo

MINER_BRANCH="$1"
CMD="$0"
ACTION="$2"

# Default miner.settings
TMP_DIR="/tmp/newminer"
GIT_USER_REPO="cynixx3/third-party-miner-installer-for-ethos"
MINER_ARCHIVE_FOLDER="$MINER_BRANCH"
#RELEASE_SHASUM="sha256sum of archive"
#DEPENDS="URL URL"

# Get miner files and setup temporary opt/
f.PREPMINER(){
if [ "$(echo $VER | sed 's/\.//g')" -ne 133 ] ; then
  echo "Unable to install"
  exit 14
fi
  echo "Getting latest release of miner"
  DOWNLOAD_URL=$(curl -s https://api.github.com/repos/$GIT_USER_REPO/releases \
  | grep -i "browser_download_url.*$MINER_BRANCH.*t.*z" \
  | cut -d '"' -f 4 \
  | grep -vE '(osx|txt)' \
  | head -1 )
  COMPRESSION=$(echo $DOWNLOAD_URL | grep -oP 't[argxb.]{1,4}z2?$')
  case $COMPRESSION in
    tar.gz|tgz) CT="-z" ;;
    tar.xz) CT="-J" ;;
    tar.bz2) CT="-j" ;;
    *) CT="" ;;
  esac

  if [ -f $MINER_BRANCH.$COMPRESSION ] ; then rm -rf /tmp/newminer/$MINER_BRANCH.$COMPRESSION ; fi
  
  if ! wget -q $DOWNLOAD_URL -O "$MINER_BRANCH.$COMPRESSION" ; then
    echo "Download failed"
    exit 10
  fi

  if [ $RELEASE_SHASUM ] ; then
    echo "Comparing download with checksum"
    if ! echo "$RELEASE_SHASUM $MINER_BRANCH.$COMPRESSION" | sha256sum -c ; then
      echo "checksum of miner files failed, please try again or update miner.settings in repo"
      exit 11
    fi
  fi

  echo "Unpacking miner"
  SUBDIR=""
  if tar "$CT" -tf "$MINER_BRANCH.$COMPRESSION" | grep -qv "^$(tar "$CT" -tf "$MINER_BRANCH.$COMPRESSION" | sort | head -n1 )" ; then
    SUBDIR="--directory=$MINER_ARCHIVE_FOLDER" 
    mkdir "$MINER_ARCHIVE_FOLDER"
    echo "WARNING: tarbomb detected. Opening in subdirectory, $MINER_ARCHIVE_FOLDER."
  fi
  if ! tar "$CT" -xf "$MINER_BRANCH.$COMPRESSION" "$SUBDIR" ; then
    echo "Unable to extract files package. please try again."
    exit 12
  fi
  
  mkdir -p "$TMP_DIR/opt/miners"
  rsync -a --delete "$TMP_DIR/$MINER_ARCHIVE_FOLDER/" "$TMP_DIR/opt/miners/$MINER_BRANCH"
  sudo chown -R ethos.ethos "$TMP_DIR"/opt/miners/
  
  if [ "$HOOK_PREP_MINER" ] ; then $HOOK_PREP_MINER ; fi

  echo "Temporary miner files ready"
}

# Prevent package lock when installing dependencies
f.CHECKDPKG(){
  DPKGLOCKED=$(lsof /var/lib/dpkg/lock 2>/dev/null | grep -c "/var/lib/dpkg/lock")
  WAITCOUNT="0"
  if [ "$DPKGLOCKED" -ge "1" ]; then
    until [ "$DPKGLOCKED" = "0" ] || [ "$WAITCOUNT" = "60" ]; do
      DPKGLOCKED=$(lsof /var/lib/dpkg/lock 2>/dev/null | grep -c "/var/lib/dpkg/lock")
      ((WAITCOUNT++))
    done
  fi
  if [ "$WAITCOUNT" -ge "120" ]; then
    echo "Timed out waiting on dpkg lock to clear."
    echo "manually clearing dpkg lock"
    rm -f /var/lib/dpkg/lock
  fi
}

# Get Replacement ethos files that enable miner operation and install miner specific dependencies
f.PREPETHOS(){
  echo "Download and unpack files needed by ethOS"
#todo add ethos version checking
  git clone https://github.com/cynixx3/third-party-miner-installer-for-ethos.git -b "$MINER_BRANCH"

  if [ -f "$TMP_DIR/third-party-miner-installer-for-ethos/opt/ethos/$MINER_BRANCH.stub.conf" ] ; then
    mkdir -p "$TMP_DIR/home/ethos/"
    mv "$TMP_DIR/third-party-miner-installer-for-ethos/opt/ethos/$MINER_BRANCH.stub.conf" "$TMP_DIR/home/ethos/"
    sudo chmod 644 "$TMP_DIR/home/ethos/$MINER_BRANCH.stub.conf"
    sudo chown -R ethos.ethos "$TMP_DIR/home/ethos/$MINER_BRANCH.stub.conf"
  fi

  mkdir -p $TMP_DIR/opt/ethos
  rsync -a --delete "$TMP_DIR/third-party-miner-installer-for-ethos/opt/ethos/" "$TMP_DIR/opt/ethos"
  chmod 775 "$TMP_DIR"/opt/ethos/bin/* "$TMP_DIR"/opt/ethos/sbin/* 
  chmod 744 "$TMP_DIR"/opt/ethos/etc/*
  if [ -f "$TMP_DIR"/opt/ethos/lib/minerprocess.php ] ; then
    chmod 644 "$TMP_DIR"/opt/ethos/lib/minerprocess.php
  fi
  if [ -f  "$TMP_DIR"/opt/ethos/lib/functions.php ] ; then
    chmod 755 "$TMP_DIR"/opt/ethos/lib/functions.php
  fi
  sudo chown -R root.root "$TMP_DIR"/opt/ethos/
  sudo chown -R ethos.ethos "$TMP_DIR"/opt/ethos/etc/screenrc.* "$TMP_DIR/opt/ethos/bin/minestop"

  echo "Check for dependencies"
  if [ "$DEPENDS" ] ; then
    echo "Installing dependencies"
    mkdir "$TMP_DIR/depends"
    for URL in ${DEPENDS[@]} ; do
      wget $URL -P depends
    done
    f.CHECKDPKG
    sudo dpkg --configure -a
    f.CHECKDPKG
    sudo dpkg -i "$TMP_DIR"/depends/*.deb
  fi
  
  if [ "$HOOK_PREP_ETHOS" ] ; then $HOOK_PREP_ETHOS ; fi
  
  echo "ethOS files ready"
}

# Gather stock ethOS files in temporary opt/ and install stock packages
f.REVERT(){
if [ "$(echo $VER | sed 's/\.//g')" -lt 132 ] ; then
  echo "Unable to revert"
  exit 14
fi
  git clone https://github.com/cynixx3/third-party-miner-installer-for-ethos.git -b ethos-$VER
  mkdir -p "$TMP_DIR/opt/ethos"
  rsync -a --delete "$TMP_DIR/third-party-miner-installer-for-ethos/opt/ethos/" "$TMP_DIR/opt/ethos"
  chmod 775 "$TMP_DIR"/opt/ethos/bin/* "$TMP_DIR"/opt/ethos/sbin/* 
  if [ -f "$TMP_DIR"/opt/ethos/lib/minerprocess.php ] ; then
    chmod 644 "$TMP_DIR"/opt/ethos/lib/minerprocess.php
  fi
  if [ -f  "$TMP_DIR"/opt/ethos/lib/functions.php ] ; then
    chmod 755 "$TMP_DIR"/opt/ethos/lib/functions.php
  fi
  sudo chown -R root.root "$TMP_DIR"/opt/ethos/
  sudo chown -R ethos.ethos "$TMP_DIR"/opt/ethos/bin/minestop
# Reinstall stock dependencies
  mkdir "$TMP_DIR/depends"
  wget http://security.ubuntu.com/ubuntu/pool/main/g/gcc-4.8/gcc-4.8-base_4.8.4-2ubuntu1~14.04.4_amd64.deb -P depends
  wget https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test/+build/14981774/+files/gcc-8-base_8.1.0-5ubuntu1~14.04_amd64.deb -P depends
  f.CHECKDPKG
  sudo dpkg --configure -a
  f.CHECKDPKG
  sudo dpkg -i "$TMP_DIR"/depends/*.deb
  
  if [ "$HOOK_REVERT" ] ; then $HOOK_REVERT ; fi
}

f.INSTALL(){
  echo "Stopping the miner"
  /opt/ethos/bin/disallow
  ps uax | egrep "avermore|ccminer|cgminer-skein|claymore|dstm-zcash|ethminer|ewbf-equihash|ewbf-zcash|lolminer|nevermore|optiminer-zcash|progpowminer|sgminer-gm|teamredminer|xmr-stak|xtl-stak|$MINER_BRANCH" | grep -Ev '(curl|update-miner|miner-manager|develop|grep)' | awk '{print $2}' | sudo xargs kill -9
  
  echo "Installing miner"
  sudo rsync -av "$TMP_DIR/opt/" /opt
  if [ -f "$TMP_DIR/home/ethos/$MINER_BRANCH.stub.conf" ] ; then
    sudo rsync -av "$TMP_DIR/home/ethos/" /home/ethos
    if [ "$HOOK_STUB" ] ; then $HOOK_STUB ; fi
  fi

  if [ "$HOOK_INSTALL" ] ; then $HOOK_INSTALL ; fi

  echo "Restarting services and miner"
  sudo service ethos-miner-daemon restart
  sudo service ethos-stats-daemon restart
  sudo service ethos-gpu-stats-daemon restart
  /opt/ethos/bin/allow
}

f.CLEANUP(){
  rm -rf "$TMP_DIR"
  echo "temporary files removed"
}

f.HELP (){
  echo "$1
Usage $CMD [ Miner ] ( install | update | revert )

Miners Available:
$(curl -s https://api.github.com/repos/cynixx3/third-party-miner-installer-for-ethos/branches | grep name | cut -d '"' -f 4 | grep -Ev '(1.3|master|develop)')"
}

# TODO add logging
if [ "$#" -ne "2" ] ; then
  f.HELP "Wrong number of arguments"
  exit 1
elif [[ "$(curl -s https://api.github.com/repos/cynixx3/third-party-miner-installer-for-ethos/branches | grep name | cut -d '"' -f 4 | grep -Ev '(1.3|master|develop)')" == *" $MINER_BRANCH "* ]] ; then
  f.HELP "Invalid miner selected, Please choose from the list below"
  exit 2
fi

# Get miner settings
source <(curl -s https://raw.githubusercontent.com/cynixx3/third-party-miner-installer-for-ethos/$MINER_BRANCH/miner.settings)

if [ -d "$TMP_DIR" ] ; then rm -rf "$TMP_DIR" ; fi
echo "Move to a temporary work space"
mkdir "$TMP_DIR"
cd "$TMP_DIR" || exit 10
VER=$(grep -oE "[0-9]+\.[0-9]+\.[0-9]+" /opt/ethos/etc/version)

case "$2" in
  install)
    f.PREPMINER
    f.PREPETHOS
    f.INSTALL
    f.CLEANUP
  ;;
  update)
    f.PREPMINER
    f.INSTALL
    f.CLEANUP
  ;;
  revert)
    f.REVERT
    rm -rf "/opt/miners/$MINER_BRANCH"
    if [ -f "/home/ethos/$MINER_BRANCH.stub.conf" ] ; then
      rm "/home/ethos/$MINER_BRANCH.stub.conf"
    fi
    f.INSTALL
    f.CLEANUP
  ;;
  *)
    f.HELP "Invalid instruction, options are install, update, or revert"
    exit 3
esac
cd ~ || exit 20
