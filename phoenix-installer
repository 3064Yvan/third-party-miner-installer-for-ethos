#!/bin/bash

# This is not intended to be a working script, it is mearly an example of what developers can do
MINER_BRANCH="phoenixminer"
MINER_ARCHIVE_FOLDER="PhoenixMiner_4.0b_Linux"
RELEASE_CHECKSUM="354307c366d32b37793022aced287f6a76dc1037e98ab18d1af400bc532ba0d2"
TMP_DIR="/tmp/newminer"

echo "Move to a temporary work space"
mkdir "$TMP_DIR"
cd "$TMP_DIR" || exit

# Get miner files and setup temporary opt/
f.prepminer(){
  echo "Getting latest release of miner"
  curl -s https://api.github.com/repos/cynixx3/third-party-miner-installer-for-ethos/releases \
  | grep -i "browser_download_url.*$MINER_BRANCH.*tar\..z" \
  | cut -d '"' -f 4 \
  | head -1 \
  | wget -qi - -O "$MINER_BRANCH.tar.gz"

  echo "Comparing download with checksum"
  if echo "$RELEASE_CHECKSUM $MINER_BRANCH.tar.gz" | sha256sum -c ; then
    echo "checksum of downloaded files failed, please try again"
    exit 1
  fi
  
  echo "Unpacking miner"
  if ! tar xzf "$TMP_DIR/$MINER_BRANCH.tar.gz" ; then
    echo "Unable to extract files package. please try again."
    exit 2
  fi
  
  mkdir -p "$TMP_DIR/opt/miners"
  rsync -a --delete "$TMP_DIR/$MINER_ARCHIVE_FOLDER/" "$TMP_DIR/opt/miners/$MINER_BRANCH"
  
  echo "Temporary miner files ready"
}

# Prevent package lock when installing dependencies
f.checkdpkg(){
  DPKGLOCKED=$(lsof /var/lib/dpkg/lock 2>/dev/null | grep -c "/var/lib/dpkg/lock")
  WAITCOUNT="0"
  if [ "$DPKGLOCKED" -ge "1" ]; then
    until [ "$DPKGLOCKED" = "0" ] || [ "$WAITCOUNT" = "60" ]; do
      DPKGLOCKED=$(lsof /var/lib/dpkg/lock 2>/dev/null | grep -c "/var/lib/dpkg/lock")
      ((WAITCOUNT++))
    done
  fi
  if [ "$WAITCOUNT" -ge "120" ]; then
    echo "Timed out waiting on dpkg lock to clear."
    echo "manually clearing dpkg lock"
    rm -f /var/lib/dpkg/lock
  fi
}

# Get Replacement ethos files that enable miner operation and install miner specific dependencies
f.prepethos(){
  echo "Download and unpack files needed by ethOS"
#todo add ethos version checking
  git clone https://github.com/cynixx3/third-party-miner-installer-for-ethos.git -b "$MINER_BRANCH"
  
  mkdir -p $TMP_DIR/opt/ethos
  rsync -a --delete "$TMP_DIR/third-party-miner-installer-for-ethos/opt/ethos/" "$TMP_DIR/opt/ethos"
  chmod ug+x "$TMP_DIR/opt/ethos/*"

  echo "Check for dependencies"
  if [ "$(dpkg-query -W -f='${Status}' gcc-5-base 2>/dev/null | grep -c "ok installed")" -eq 0 ] ; then
    echo "Installing dependencies"
    mkdir "$TMP_DIR/depends"
    wget http://security.ubuntu.com/ubuntu/pool/main/g/gcc-5/gcc-5-base_5.4.0-6ubuntu1~16.04.10_amd64.deb -P depends
    wget http://security.ubuntu.com/ubuntu/pool/main/g/gcc-5/libstdc++6_5.4.0-6ubuntu1~16.04.10_amd64.deb -P depends
    f.checkdpkg
    sudo dpkg --configure -a
    f.checkdpkg
    sudo dpkg -i "$TMP_DIR/depends/*.deb"
  fi
  
  echo "ethOS files ready"
}

# Gather stock ethOS files in temporary opt/ and install stock packages
f.revert(){
#todo add ethos version checking
  git clone https://github.com/cynixx3/third-party-miner-installer-for-ethos.git -b ethos-1.3.3
  mkdir -p "$TMP_DIR/opt/ethos"
  rsync -a --delete "$TMP_DIR/third-party-miner-installer-for-ethos/opt/ethos/" "$TMP_DIR/opt/ethos"
  chmod ug+x "$TMP_DIR/opt/ethos/lib/*" "$TMP_DIR/opt/ethos/bin/*" "$TMP_DIR/opt/ethos/sbin/*"
  chmod u+x "$TMP_DIR/opt/ethos/etc/*"
# Reinstall stock dependencies
#todo add ethos version checking
  mkdir "$TMP_DIR/depends"
  wget http://security.ubuntu.com/ubuntu/pool/main/g/gcc-4.8/gcc-4.8-base_4.8.4-2ubuntu1~14.04.4_amd64.deb -P depends
  wget https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test/+build/14981774/+files/gcc-8-base_8.1.0-5ubuntu1~14.04_amd64.deb -P depends
  f.checkdpkg
  sudo dpkg --configure -a
  f.checkdpkg
  sudo dpkg -i "$TMP_DIR/depends/*.deb"
}

f.install(){
  echo "Stopping the miner"
  /opt/ethos/bin/disallow
  /opt/ethos/bin/minestop
  
  echo "Installing miner"
  sudo rsync -av "$TMP_DIR/opt/" /opt
  sudo chown -R ethos.ethos /opt/miners/
  
  echo "Restarting services and miner"
  sudo service ethos-miner-daemon restart
  sudo service ethos-stats-daemon restart
  sudo service ethos-gpu-stats-daemon restart
  /opt/ethos/bin/allow
}

f.cleanup(){
  rm -rf "$TMP_DIR"
}

case "$1" in
  install)
    f.prepminer
    f.prepethos
    f.install
    f.cleanup
  ;;
  update)
    f.prepminer
    f.install
    f.cleanup
  ;;
  revert)
    f.revert
    rm -rf "/opt/miners/$MINER_BRANCH"
    f.install
    f.cleanup
  ;;
  *)
    echo $"Usage: $0 {install|update|revert}"
    exit 1
esac
cd ~ || exit
