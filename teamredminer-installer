#!/bin/bash

# This is not intended to be a working script, it is merely an example of what developers can do
TMP_DIR=/tmp/teamredminer
echo "Move to a temporary work space"
mkdir $TMP_DIR
cd $TMP_DIR

f.prepminer(){
  echo "Getting latest release of miner"
# Method for getting latest git release
  curl -s https://api.github.com/repos/todxx/teamredminer/releases/latest \
  | tr ',' '\n' \
  | grep "browser_download_url.*.tgz" \
  | cut -d '"' -f 4 \
  | wget -qi - -O teamredminer.tar.gz
# OR method if you have a direct url
#  wget https://github.com/todxx/teamredminer/releases/download/v0.3.8/teamredminer-v0.3.8-linux.tgz

  echo "Comparing download with checksum"
  echo "10ea8d06053b6958ebbd3a58100a6d07aae1af5e8d0246bd65ef88e278799957 teamredminer.tar.gz" | sha256sum -c 
  if [ "$?" -ne "0" ]; then echo "checksum of downloaded files failed, please try again";exit 1; fi
  
  echo "Unpacking miner"
  tar xzf $TMP_DIR/teamredminer.tar.gz
  if [ "$?" != "0" ]; then
    echo "Unable to extract files package. please try again."
    exit 2
  fi
  
  mkdir -p $TMP_DIR/opt/miners
  rsync -a --delete $TMP_DIR/teamredminer/ $TMP_DIR/opt/miners/teamredminer
  
  echo "Temporary miner files ready"
}

f.checkdpkg(){
  DPKGLOCKED=$(lsof /var/lib/dpkg/lock 2>/dev/null | grep -c "/var/lib/dpkg/lock")
  WAITCOUNT="0"
  if [ "$DPKGLOCKED" -ge "1" ]; then
    until [ "$DPKGLOCKED" = "0" ] || [ "$WAITCOUNT" = "60" ]; do
      DPKGLOCKED=$(lsof /var/lib/dpkg/lock 2>/dev/null | grep -c "/var/lib/dpkg/lock")
      ((WAITCOUNT++))
    done
  fi
  if [ "$WAITCOUNT" -ge "120" ]; then
    echo "Timed out waiting on dpkg lock to clear."
    echo "manually clearing dpkg lock"
    rm -f /var/lib/dpkg/lock
  fi
}

f.prepethos(){
  echo "Download and unpack files needed by ethOS"
  git clone https://github.com/cynixx3/third-party-miner-installer-for-ethos.git -b teamredminer
  
  mkdir -p $TMP_DIR/opt/ethos
  rsync -a --delete $TMP_DIR/third-party-miner-installer-for-ethos/opt/ethos/ $TMP_DIR/opt/ethos
  chmod ug+x $TMP_DIR/opt/ethos/*
  
  echo "ethOS files ready"
}

f.revert(){
  git clone https://github.com/cynixx3/third-party-miner-installer-for-ethos.git -b ethos-1.3.3
  mkdir -p $TMP_DIR/opt/ethos
  rsync -a --delete $TMP_DIR/third-party-miner-installer-for-ethos/opt/ethos/ $TMP_DIR/opt/ethos
  chmod ug+x $TMP_DIR/opt/ethos/lib/* $TMP_DIR/opt/ethos/bin/* $TMP_DIR/opt/ethos/sbin/*
  chmod u+x $TMP_DIR/opt/ethos/etc/*
}

f.install(){
  echo "Stopping the miner"
  /opt/ethos/bin/disallow
  /opt/ethos/bin/minestop
  
  echo "Installing miner"
  sudo rsync -av $TMP_DIR/opt/ /opt
  sudo chown -R ethos.ethos /opt/miners/
  
  echo "Restarting services and miner"
  sudo service ethos-miner-daemon restart
  sudo service ethos-stats-daemon restart
  sudo service ethos-gpu-stats-daemon restart
  /opt/ethos/bin/allow
}

f.cleanup(){
  rm -rf $TMP_DIR
}

case "$1" in
  install)
    f.prepminer
    f.prepethos
    f.install
    f.cleanup
  ;;
  update)
    f.prepminer
    f.install
    f.cleanup
  ;;
  revert)
    f.revert
    rm -rf /opt/miners/phoenixminer
    f.install
    f.cleanup
  ;;
  *)
    echo $"Usage: $0 {install|update|revert}"
    exit 1
esac
cd ~
